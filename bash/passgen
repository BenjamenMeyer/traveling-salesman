#!/bin/bash
SCRIPT_TOOL_NAME="passgen"
SCRIPT_TOOL_DEPENDENCIES="passgen"

# unfortunately we have to have this local to the script
# b/c it's used to find the path where the real script
# functions exist
function getScriptDir()
	{
	local SCRIPT_NAME=$(dirname "${1}")
	while [ -h "${SCRIPT_NAME}" ];
	do
		SCRIPT_NAME_LINK=$(readlink "${SCRIPT_NAME}")
		SCRIPT_NAME=$(dirname "${SCRIPT_NAME_LINK}")
	done
	echo "${SCRIPT_NAME}"
	}
# script home dir
SCRIPT_DIRNAME=$(getScriptDir "${BASH_SOURCE[0]}")
# script function home dir
TOOL_HOME="${SCRIPT_DIRNAME}/.tools"

# pull in the functions we need
# argparse also does a little manipulation of the script
# arguments for the virtualenv
source "${TOOL_HOME}/argparse.sh"
source "${TOOL_HOME}/python.sh"

# parse any of our arguments after the does its thing
# with the arguments; we don't want to parse any that
# have already been taken out
let -i PASSGEN_PASSWORD_LENGTH=30
PASSGEN_USE_PUNCTIONATION="True"
PASSGEN_USE_DIGITS="True"
PASSGEN_USE_LETTERS="True"
PASSGEN_LETTER_CASE="both"

ARG_PASSWORD_LENGTH="--length"
ARG_DISABLE_PUNCTUATION="--no-punctuation"
ARG_DISABLE_DIGITS="--no-digits"
ARG_DISABLE_LETTERS="--no-letters"
ARG_LETTER_CASING="--letter-casing"
LOCAL_ARG_OPTION=""
for LOCAL_SCRIPT_ARG in ${UNPARSED_ARGS}
do
	# detect argument names
	# set `LOCAL_ARG_OPTION` to `LOCAL_SCRIPT_ARG` if there's a value to the parameter
	if [ -z "${LOCAL_ARG_OPTION}" ]; then
		case "${LOCAL_SCRIPT_ARG}" in
			"${ARG_PASSWORD_LENGTH}")
				LOCAL_ARG_OPTION="${ARG_PASSWORD_LENGTH}"
				;;
			"${ARG_DISABLE_PUNCTUATION}")
				PASSGEN_USE_PUNCTIONATION="False"
				;;
			"${ARG_DISABLE_DIGITS}")
				PASSGEN_USE_DIGITS="True"
				;;
			"${ARG_DISABLE_LETTERS}")
				PASSGEN_USE_LETTERS="True"
				;;
			"${ARG_LETTER_CASING}")
				LOCAL_ARG_OPTION="${ARG_LETTER_CASING}"
				;;
			*)
				;;
		esac
	else
		# extract any values to the parameter
		# clear LOCAL_ARG_OPTION when done
		case "${LOCAL_ARG_OPTION}" in
			"${ARG_PASSWORD_LENGTH}")
				let -i PASSGEN_PASSWORD_LENGTH=${LOCAL_SCRIPT_ARG}
				LOCAL_ARG_OPTION=""
				;;
			"${ARG_LETTER_CASING}")
				case "${LOCAL_SCRIPT_ARG}" in
					"both")
						PASSGEN_LETTER_CASE="both"
						;;
					"upper")
						PASSGEN_LETTER_CASE="upper"
						;;
					"lower")
						PASSGEN_LETTER_CASE="lower"
						;;
					*)
						echo "Error: Letter casing must be one of - 'both', 'upper', or 'lower'"
						exit 1
						;;
				esac
				LOCAL_ARG_OPTION=""
				;;
			*)
				LOCAL_ARG_OPTION=""
				;;
		esac
	fi
done

# get the tox environment path
SCRIPT_VENV=$(getToolVirtualEnv "${SCRIPT_TOOL_NAME}")

# create it if it doesn't exist yet or if the parameter was
# passed in then rebuild the environment. If the environment
# is created then the result is 2 so we know to install stuff
createToolVirtualEnv "${SCRIPT_VENV}" "${REBUILD_VENV}"
install_packages_in_env=$?

# activate the virtualenv
activateToolVirtualEnv "${SCRIPT_VENV}"

# install any packages for a new environment
if [ ${install_packages_in_env} -eq 2 ]; then
	installPackages ${SCRIPT_TOOL_DEPENDENCIES}
fi

# finally, run our command passing in any remaining arguments
# passing it's result back to the caller
python -c "
import passgen

print(
	passgen.passgen(
		length=${PASSGEN_PASSWORD_LENGTH},
		punctuation=${PASSGEN_USE_PUNCTIONATION},
		digits=${PASSGEN_USE_DIGITS},
		letters=${PASSGEN_USE_LETTERS},
		case='${PASSGEN_LETTER_CASE}'
	)
)
"
exit $?
